{"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Keeping your iOS app alive while it is in the background to allow MIDI messages to be sent and received.","type":"text"}],"metadata":{"role":"article","modules":[{"name":"MIDIKitIO"}],"roleHeading":"Article","title":"Send and Receive on iOS While Your App is Backgrounded"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikitio\/send-and-receive-on-ios-in-background"]}],"hierarchy":{"paths":[["doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO"]]},"primaryContentSections":[{"content":[{"anchor":"Context","type":"heading","text":"Context","level":2},{"inlineContent":[{"text":"By default, iOS places apps into a suspended state when they are backgrounded (user either switches to a different app, goes back to the home screen, or powers the screen off).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this state, sending and receiving MIDI events is also suspended."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to have a good chance of passing App Store review, an entitlement needs to be added for a reason and not purely as a workaround."}]},{"anchor":"Producing-Audio-While-in-Background","text":"Producing Audio While in Background","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"If the application generates audio in response to receiving MIDI, you may add a background mode to allow audio playback which will keep the app (and the MIDI runloop) alive."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However be aware that an audio stream must be playing to keep the app alive. The Apple docs state:"}]},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"As long as the app is playing audio or video content or recording audio content, the app continues to run in the background. However, if recording or playback stops, the system suspends the app.","type":"text"}]}],"type":"aside"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Add the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Background Modes -> Audio, Airplay, and Picture in Picture"}]},{"type":"text","text":" app entitlement."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"background-modes-audio.png"}]},{"start":2,"items":[{"content":[{"inlineContent":[{"text":"Use AVFoundation to set up the appâ€™s audio session.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try AVAudioSession.sharedInstance()","    .setCategory(.playback, mode: .default, options: .mixWithOthers)"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Set the session as active either once at app startup, or dynamically make it active when the app is backgrounded (and inactive when the app is foregrounded).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An example implementation where a silent audio stream is played while the app is backgrounded, allowing for additional audio to play at any time as well:","type":"text"}]},{"code":["import AVFoundation","","public final class BackgroundAudioManager {","    private var audioPlayer: AVPlayer","","    public init() {","        let playerItem = AVPlayerItem(url: URL(fileURLWithPath: \"\")) \/\/ empty audio","        audioPlayer = AVPlayer(playerItem: playerItem)","","        do {","            try AVAudioSession.sharedInstance()","                .setCategory(.playback, mode: .default, options: .mixWithOthers)","        } catch {","            print(\"Error setting up background audio session: \\(error)\")","        }","    }","","    private func setActive(_ state: Bool) {","        do {","            try AVAudioSession.sharedInstance().setActive(state)","        } catch {","            print(\"Error setting background audio state: \\(error)\")","        }","    }","","    public func start() {","        setActive(true)","        audioPlayer.play()","    }","","    public func stop() {","        audioPlayer.pause()","        setActive(false)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Start background audio when your app transitions to the background and stop it when in the foreground."}],"type":"paragraph"},{"text":"SwiftUI","level":4,"anchor":"SwiftUI","type":"heading"},{"syntax":"swift","type":"codeListing","code":["@main","struct MyApp: App {","    @Environment(\\.scenePhase) private var scenePhase","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    var body: some Scene {","        WindowGroup {","            ContentView() \/\/ your main view","                .onChange(of: scenePhase) { phase in","                    switch phase {","                    case .active: \/\/ App is in the foreground","                        backgroundAudioManager.stop()","                    case .inactive: \/\/ App is transitioning between fore and back","                        break","                    case .background: \/\/ App is in the background","                        backgroundAudioManager.start()","                    @unknown default: \/\/ Handle any future unknown cases","                        break","                    }","                }","        }","    }","}"]},{"type":"heading","anchor":"UIKit-Using-Scenes","text":"UIKit Using Scenes","level":4},{"syntax":"swift","code":["class SceneDelegate: UIResponder, UIWindowSceneDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","","    func sceneDidBecomeActive(_ scene: UIScene) {","        backgroundAudioManager.stop()","    }","","    func sceneWillResignActive(_ scene: UIScene) {","        backgroundAudioManager.start()","    }","}"],"type":"codeListing"},{"text":"UIKit Without Scenes","type":"heading","level":4,"anchor":"UIKit-Without-Scenes"},{"code":["@main","class AppDelegate: UIResponder, UIApplicationDelegate {","    private let backgroundAudioManager = BackgroundAudioManager()","    ","    func applicationDidBecomeActive(_ application: UIApplication) {","        backgroundAudioManager.stop()","    }","    ","    func applicationWillResignActive(_ application: UIApplication) {","        backgroundAudioManager.start()","    }","}"],"type":"codeListing","syntax":"swift"}]}],"type":"orderedList"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"title":"Additional Topics","identifiers":["doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDI-Show-Control","doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/Simple-MIDI-Listener-Class-Example"],"anchor":"Additional-Topics"}],"sections":[],"identifier":{"url":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/Send-and-Receive-on-iOS-in-Background","interfaceLanguage":"swift"},"references":{"doc://MIDIKitIO/documentation/MIDIKitIO":{"abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"type":"reference","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDIManager","isActive":true},{"text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events.","type":"text"}],"type":"topic","url":"\/documentation\/midikitio","role":"collection","kind":"symbol","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO","title":"MIDIKitIO"},"background-modes-audio.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/MIDIKitIO\/background-modes-audio.png"}],"type":"image","alt":"Background Modes","identifier":"background-modes-audio.png"},"doc://MIDIKitIO/documentation/MIDIKitIO/Simple-MIDI-Listener-Class-Example":{"kind":"article","role":"article","abstract":[{"type":"text","text":"A barebones example of how to set up MIDIKit to receive MIDI events on a created virtual input."}],"url":"\/documentation\/midikitio\/simple-midi-listener-class-example","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/Simple-MIDI-Listener-Class-Example","type":"topic","title":"Simple MIDI Listener Class Example"},"doc://MIDIKitIO/documentation/MIDIKitIO/MIDI-Show-Control":{"abstract":[{"text":"Construct MIDI Show Control messages.","type":"text"}],"role":"article","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDI-Show-Control","title":"MIDI Show Control","url":"\/documentation\/midikitio\/midi-show-control","kind":"article","type":"topic"},"doc://MIDIKitIO/documentation/MIDIKitIO/MIDIManager":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MIDIManager"}],"role":"symbol","navigatorTitle":[{"text":"MIDIManager","kind":"identifier"}],"type":"topic","title":"MIDIManager","kind":"symbol","url":"\/documentation\/midikitio\/midimanager","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDIManager","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}]}}}