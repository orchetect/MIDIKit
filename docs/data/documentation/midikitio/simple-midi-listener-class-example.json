{"metadata":{"roleHeading":"Article","role":"article","title":"Simple MIDI Listener Class Example","modules":[{"name":"MIDIKitIO"}]},"hierarchy":{"paths":[["doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO"]]},"sections":[],"seeAlsoSections":[{"anchor":"Additional-Topics","title":"Additional Topics","identifiers":["doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/Send-and-Receive-on-iOS-in-Background","doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDI-Show-Control"],"generated":true}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"A barebones example of how to set up MIDIKit to receive MIDI events on a created virtual input.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/Simple-MIDI-Listener-Class-Example"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"syntax":"swift","code":["import Foundation","import MIDIKitIO","","public class MIDIHelper {","    private let midiManager = MIDIManager(","        clientName: \"MyAppMIDIModule\",","        model: \"MyApp\",","        manufacturer: \"MyCompany\"","    )","    ","    let inputTag = \"Virtual_MIDI_In\"","","    public init() {","        do {","            try midiManager.start()","            ","            try midiManager.addInput(","                name: \"MyApp MIDI In\",","                tag: inputTag,","                uniqueID: .userDefaultsManaged(key: inputTag),","                receiver: .events { [weak self] events, timeStamp, source in","                    \/\/ Note: this handler will be called on a background thread so be","                    \/\/ sure to call anything that may result in UI updates on the main thread","                    DispatchQueue.main.async {","                        events.forEach { self?.received(midiEvent: $0) }","                    }","                }","            )","        } catch {","            print(\"MIDI Setup Error:\", error)","        }","    }","    ","    private func received(midiEvent: MIDIEvent) {","        switch midiEvent {","        case .noteOn(let payload):","            print(\"Note On:\", payload.note, payload.velocity, payload.channel)","        case .noteOff(let payload):","            print(\"Note Off:\", payload.note, payload.velocity, payload.channel)","        case .cc(let payload):","            print(\"CC:\", payload.controller, payload.value, payload.channel)","        case .programChange(let payload):","            print(\"Program Change:\", payload.program, payload.channel)","            ","        \/\/ etc...","            ","        default:","            break","        }","    }","}"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/midikitio\/simple-midi-listener-class-example"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","references":{"doc://MIDIKitIO/documentation/MIDIKitIO/Send-and-Receive-on-iOS-in-Background":{"abstract":[{"text":"Keeping your iOS app alive while it is in the background to allow MIDI messages to be sent and received.","type":"text"}],"url":"\/documentation\/midikitio\/send-and-receive-on-ios-in-background","title":"Send and Receive on iOS While Your App is Backgrounded","role":"article","kind":"article","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/Send-and-Receive-on-iOS-in-Background","type":"topic"},"doc://MIDIKitIO/documentation/MIDIKitIO/MIDIManager":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MIDIManager"}],"title":"MIDIManager","abstract":[{"type":"text","text":"Central MIDI Port and Connection Manager and MIDI system data provider."}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MIDIManager"}],"identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDIManager","role":"symbol","url":"\/documentation\/midikitio\/midimanager"},"doc://MIDIKitIO/documentation/MIDIKitIO":{"abstract":[{"type":"text","text":"Core MIDI I\/O wrapper layer offering "},{"identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDIManager","isActive":true,"type":"reference"},{"type":"text","text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events."}],"title":"MIDIKitIO","kind":"symbol","type":"topic","role":"collection","url":"\/documentation\/midikitio","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO"},"doc://MIDIKitIO/documentation/MIDIKitIO/MIDI-Show-Control":{"abstract":[{"text":"Construct MIDI Show Control messages.","type":"text"}],"url":"\/documentation\/midikitio\/midi-show-control","title":"MIDI Show Control","role":"article","kind":"article","identifier":"doc:\/\/MIDIKitIO\/documentation\/MIDIKitIO\/MIDI-Show-Control","type":"topic"}}}