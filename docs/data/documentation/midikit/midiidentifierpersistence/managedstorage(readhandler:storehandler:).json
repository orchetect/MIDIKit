{"sections":[],"metadata":{"roleHeading":"Case","symbolKind":"case","externalID":"s:9MIDIKitIO25MIDIIdentifierPersistenceO14managedStorageyACs5Int32VSgyYbc_yAGYbctcACmF","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"managedStorage","kind":"identifier"},{"text":"(","kind":"text"},{"text":"readHandler","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"MIDIIdentifier","kind":"typeIdentifier","preciseIdentifier":"s:9MIDIKitIO14MIDIIdentifiera"},{"kind":"text","text":"?, "},{"text":"storeHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9MIDIKitIO14MIDIIdentifiera","text":"MIDIIdentifier"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"MIDIIdentifierPersistence.managedStorage(readHandler:storeHandler:)","modules":[{"name":"MIDIKit"}],"role":"symbol"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/managedStorage(readHandler:storeHandler:)","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"text":"Managed with custom storage backing (recommended only if ","type":"text"},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/userDefaultsManaged(key:suite:)","isActive":true},{"type":"text","text":" "},{"text":"is not suitable). Supply handlers to facilitate persistently reading and storing the MIDI","type":"text"},{"type":"text","text":" "},{"text":"endpoint’s unique ID.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"managedStorage"},{"text":"(","kind":"text"},{"text":"readHandler","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifier","text":"MIDIIdentifier","preciseIdentifier":"s:9MIDIKitIO14MIDIIdentifiera","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"storeHandler"},{"text":": (","kind":"text"},{"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifier","preciseIdentifier":"s:9MIDIKitIO14MIDIIdentifiera","text":"MIDIIdentifier","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"This is useful if you need more control over where you want to persist this information in"},{"text":" ","type":"text"},{"type":"text","text":"the system."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the event a collision with an existing MIDI endpoint unique ID in the system, a new"},{"type":"text","text":" "},{"type":"text","text":"random ID will be generated until there are no collisions."},{"type":"text","text":" "},{"type":"text","text":"The ID will then be passed into the "},{"type":"codeVoice","code":"storeHandler"},{"text":" closure in order to store the updated ID.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/MIDIKit\/documentation\/MIDIKit","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Endpoints","doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/midikit\/midiidentifierpersistence\/managedstorage(readhandler:storehandler:)"]}],"references":{"doc://MIDIKit/documentation/MIDIKit/MIDIIdentifierPersistence/managedStorage(readHandler:storeHandler:)":{"abstract":[{"type":"text","text":"Managed with custom storage backing (recommended only if "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/userDefaultsManaged(key:suite:)"},{"type":"text","text":" "},{"text":"is not suitable). Supply handlers to facilitate persistently reading and storing the MIDI","type":"text"},{"type":"text","text":" "},{"type":"text","text":"endpoint’s unique ID."}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"managedStorage"},{"text":"(","kind":"text"},{"text":"readHandler","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"MIDIIdentifier","preciseIdentifier":"s:9MIDIKitIO14MIDIIdentifiera","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"storeHandler","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:9MIDIKitIO14MIDIIdentifiera","text":"MIDIIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/managedStorage(readHandler:storeHandler:)","url":"\/documentation\/midikit\/midiidentifierpersistence\/managedstorage(readhandler:storehandler:)","title":"MIDIIdentifierPersistence.managedStorage(readHandler:storeHandler:)","type":"topic","role":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIIdentifier":{"role":"symbol","navigatorTitle":[{"text":"MIDIIdentifier","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"MIDIIdentifier","kind":"identifier"}],"title":"MIDIIdentifier","kind":"symbol","abstract":[{"text":"MIDIKit analogue for Core MIDI’s ","type":"text"},{"code":"MIDIUniqueID","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Most commonly used to uniquely identify MIDI endpoints in the system."}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifier","url":"\/documentation\/midikit\/midiidentifier","type":"topic"},"doc://MIDIKit/documentation/MIDIKit/MIDIManager":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MIDIManager"}],"navigatorTitle":[{"kind":"identifier","text":"MIDIManager"}],"title":"MIDIManager","url":"\/documentation\/midikit\/midimanager","role":"symbol","abstract":[{"text":"Central MIDI Port and Connection Manager and MIDI system data provider.","type":"text"}]},"doc://MIDIKit/documentation/MIDIKit/MIDIIdentifierPersistence/userDefaultsManaged(key:suite:)":{"abstract":[{"text":"Managed with UserDefaults backing (recommended).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The MIDI endpoint’s unique ID is managed automatically and persistently stored in"},{"type":"text","text":" "},{"type":"codeVoice","code":"UserDefaults"},{"type":"text","text":". The "},{"type":"codeVoice","code":"standard"},{"text":" suite is used by default unless specified.","type":"text"}],"fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"userDefaultsManaged","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"text":"suite","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"c:objc(cs)NSUserDefaults","text":"UserDefaults","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence\/userDefaultsManaged(key:suite:)","kind":"symbol","url":"\/documentation\/midikit\/midiidentifierpersistence\/userdefaultsmanaged(key:suite:)","title":"MIDIIdentifierPersistence.userDefaultsManaged(key:suite:)","type":"topic","role":"symbol"},"doc://MIDIKit/documentation/MIDIKit/MIDIIdentifierPersistence":{"url":"\/documentation\/midikit\/midiidentifierpersistence","role":"symbol","title":"MIDIIdentifierPersistence","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIIdentifierPersistence","type":"topic","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MIDIIdentifierPersistence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MIDIIdentifierPersistence"}],"abstract":[{"type":"text","text":"Defines persistence behavior of a MIDI unique ID in the system."}]},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO","kind":"article","title":"MIDIKitIO","url":"\/documentation\/midikit\/midikitio","role":"collectionGroup","abstract":[{"text":"Core MIDI I\/O wrapper layer offering ","type":"text"},{"type":"reference","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIManager","isActive":true},{"text":" class to create virtual ports and connect to existing ports in the system in order to send and receive MIDI events.","type":"text"}]},"doc://MIDIKit/documentation/MIDIKit/MIDIKitIO-Endpoints":{"type":"topic","identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit\/MIDIKitIO-Endpoints","kind":"article","title":"Working With Endpoints","url":"\/documentation\/midikit\/midikitio-endpoints","role":"collectionGroup","abstract":[{"text":"Endpoints represent both virtual and physical MIDI inputs (destinations) and outputs (sources).","type":"text"}]},"doc://MIDIKit/documentation/MIDIKit":{"type":"topic","kind":"symbol","role":"collection","title":"MIDIKit","abstract":[{"text":"MIDIKit umbrella import that includes all MIDIKit modules.","type":"text"}],"identifier":"doc:\/\/MIDIKit\/documentation\/MIDIKit","url":"\/documentation\/midikit"}}}